# -*- coding: utf-8 -*-
"""app-kstm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15gYj2cIH-vVqmSdKZR0Ee6kwgmMpe-H2
"""

import streamlit as st
import pandas as pd
import numpy as np
import xarray as xr
import folium
from streamlit_folium import st_folium
from copernicusmarine import subset, login
import os
import requests
from datetime import datetime, timedelta

# ===========================
# CONFIGURACIÓN STREAMLIT
# ===========================
st.set_page_config(page_title="🌊 Dashboard de Riesgos Marítimos", layout="wide")

st.title("🌊 Dashboard de Pronóstico Marino — Viento y Olas")
st.markdown("Visualización integrada de **viento GFS (00Z)** y **olas Copernicus** para los principales puertos.")

# ===========================
# COORDENADAS DE PUERTOS
# ===========================
coords = {
    "Mar del Plata": (-38.03, -57.5),
    "Comodoro Rivadavia": (-45.9, -67.38),
    "Punta Colorada": (-41.7, -65.02),
    "Puerto Madryn": (-42.7, -65.02),
    "Rawson": (-43.3, -65.14),
    "Punta Quilla": (-50.11, -68.46),
    "Caleta Olivia": (-46.45, -67.55),
    "R Gallegos": (-51.6, -68.96),
    "San Julián": (-49.30, -67.6),
    "Puerto Deseado": (-47.76, -65.87),
    "Camarones": (-40.8, -65.69),
    "San Martín de los Andes": (-40.16, -71.35),
    "Bariloche": (-41.13, -71.3),
    "Angostura": (-40.78, -71.65),
    "Neuquén": (-38.95, -68.05),
    "San Antonio": (-40.82, -64.8),
    "Bahía Blanca": (-39, -61.9)
}

# ===========================
# FUNCIONES AUXILIARES
# ===========================
def corregir_longitud(lon):
    return lon if lon >= 0 else 360 + lon

def viento_uv_a_direccion(u, v):
    return (270 - np.degrees(np.arctan2(v, u))) % 360

def descargar_archivo(base_time, fhour):
    url = f"https://nomads.ncep.noaa.gov/pub/data/nccf/com/gfs/prod/gfs.{base_time:%Y%m%d}/{base_time:%H}/atmos/gfs.t{base_time:%H}z.pgrb2.0p25.f{fhour:03d}"
    os.makedirs("data_gfs", exist_ok=True)
    local_file = f"data_gfs/gfs_{base_time:%Y%m%d_%H}_f{fhour:03d}.grib2"

    if not os.path.exists(local_file):
        r = requests.get(url, stream=True)
        with open(local_file, "wb") as f:
            for chunk in r.iter_content(8192):
                f.write(chunk)
    return local_file

def procesar_grib(file, forecast_hour, base_time):
    import cfgrib
    import xarray as xr

    try:
        ds_u = xr.open_dataset(file, engine="cfgrib", filter_by_keys={'shortName': '10u'}, backend_kwargs={"indexpath": ""})
        ds_v = xr.open_dataset(file, engine="cfgrib", filter_by_keys={'shortName': '10v'}, backend_kwargs={"indexpath": ""})
    except:
        return pd.DataFrame([])

    filas = []
    tiempo = base_time + timedelta(hours=forecast_hour)

    for ciudad, (lat, lon_orig) in coords.items():
        lon = corregir_longitud(lon_orig)
        try:
            u = ds_u['u10'].interp(latitude=lat, longitude=lon).values.item()
            v = ds_v['v10'].interp(latitude=lat, longitude=lon).values.item()
            vel = np.sqrt(u**2 + v**2)
            dir = viento_uv_a_direccion(u, v)
            filas.append({
                "Ciudad": ciudad,
                "Tiempo UTC": tiempo,
                "Velocidad [kt]": vel * 1.94384,
                "Dirección [°]": dir,
                "Lat": lat,
                "Lon": lon_orig
            })
        except:
            continue

    ds_u.close()
    ds_v.close()
    return pd.DataFrame(filas)

@st.cache_data(show_spinner=True)
def obtener_viento_gfs():
    base_time = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)
    df_all = []
    for fh in [0, 24, 48, 72]:
        f = descargar_archivo(base_time, fh)
        df = procesar_grib(f, fh, base_time)
        df_all.append(df)
    df = pd.concat(df_all)
    df["Día"] = df["Tiempo UTC"].dt.date
    return df

@st.cache_data(show_spinner=True)
def obtener_olas_copernicus():
    username = st.secrets["username"]
    password = st.secrets["password"]
    login(username=username, password=password, force_overwrite=True)

    fecha_hoy = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)
    fecha_4dias = fecha_hoy + timedelta(days=4)
    archivo_salida = "olas_atlantico_sur.nc"

    if not os.path.exists(archivo_salida):
        subset(
            dataset_id="cmems_mod_glo_wav_anfc_0.083deg_PT3H-i",
            variables=["VHM0"],
            minimum_longitude=-80,
            maximum_longitude=-50,
            minimum_latitude=-60,
            maximum_latitude=-33,
            start_datetime=fecha_hoy.isoformat(),
            end_datetime=fecha_4dias.isoformat(),
            output_filename=archivo_salida
        )
    ds = xr.open_dataset(archivo_salida)
    return ds

# ===========================
# DESCARGA Y SELECCIÓN DE DÍA
# ===========================
st.sidebar.header("🗓️ Selección de Día")
viento = obtener_viento_gfs()
ds_olas = obtener_olas_copernicus()

dias_disp = sorted(viento["Día"].unique())
dia_sel = st.sidebar.selectbox("Elegí el día a visualizar:", dias_disp)

df_dia = viento[viento["Día"] == dia_sel]
olas_dia = ds_olas["VHM0"].sel(time=slice(str(dia_sel), str(dia_sel + timedelta(days=1)))).max(dim="time")

# ===========================
# MAPA COMBINADO
# ===========================
m = folium.Map(location=[-44, -63], zoom_start=5, tiles="cartodbpositron")

# --- Campo de olas ---
lon = ds_olas["longitude"].values
lat = ds_olas["latitude"].values
X, Y = np.meshgrid(lon, lat)
Z = olas_dia.values

# Clasificamos según niveles de ola
mask_3 = np.where(Z > 3, 1, np.nan)
mask_4 = np.where(Z > 4, 1, np.nan)
mask_6 = np.where(Z > 6, 1, np.nan)

import matplotlib.pyplot as plt
from matplotlib import cm

def add_overlay(data, color, name):
    import io
    from PIL import Image
    fig, ax = plt.subplots(figsize=(6,5))
    plt.contourf(X, Y, data, levels=[0.5, 1.5], colors=[color], alpha=0.5)
    plt.axis('off')
    buf = io.BytesIO()
    plt.savefig(buf, format="png", transparent=True, bbox_inches='tight', pad_inches=0)
    plt.close(fig)
    buf.seek(0)
    overlay = folium.raster_layers.ImageOverlay(
        image=Image.open(buf),
        bounds=[[-60, -80], [-33, -50]],
        name=name,
        opacity=0.5,
    )
    overlay.add_to(m)

add_overlay(mask_3, 'yellow', ">3 m")
add_overlay(mask_4, 'orange', ">4 m")
add_overlay(mask_6, 'red', ">6 m")

# --- Marcadores de viento ---
def color_viento(v):
    if v > 30:
        return "red"
    elif v > 20:
        return "orange"
    else:
        return "green"

for _, r in df_dia.iterrows():
    folium.CircleMarker(
        location=[r["Lat"], r["Lon"]],
        radius=7,
        color=color_viento(r["Velocidad [kt]"]),
        fill=True,
        fill_color=color_viento(r["Velocidad [kt]"]),
        popup=folium.Popup(
            f"<b>{r['Ciudad']}</b><br>"
            f"Velocidad: {r['Velocidad [kt]']:.1f} kt<br>"
            f"Dirección: {r['Dirección [°]']:.0f}°",
            max_width=200
        )
    ).add_to(m)

folium.LayerControl().add_to(m)

# --- Mostrar mapa ---
st_folium(m, width=1200, height=700)

st.markdown("""
**Leyenda:**
🟢 Viento ≤ 20 kt | 🟠 20–30 kt | 🔴 >30 kt
🟡 Olas >3 m | 🟧 Olas >4 m | 🔴 Olas >6 m
""")